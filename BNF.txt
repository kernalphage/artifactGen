
[IMPLEMENTED]
world = list(definiton, NEWLINE)
definition -> "[" LITERAL "]" list(assignment,";")
// person.height.cm for example 
locator_expr -> list(LITERAL, ".")
statement_expr -> list( base_expr , ",")
number_expr -> NUMBER | list(NUMBER, ":")


[PLANNED CHANGES]
// todo: expand with an expression that allows @(#location_to_modify)
// TODO: $value*, adds a multiply expression to the lvalue somehow
lvalue -> ("$" | "@")? locator_expr
// TODO: Many tokens, as long as it doesn't include a ,?
// TODO: Do i want to split out side_effect and function_expr? so choice_expr can use base_expr directly
base_expr -> list(LITERAL) | STRING | number_expr | rvalue | side_effect | function_expr
// TODO: shorthand for "what's on the left side" eg: 
// @height : #previous.@  
// TODO: variable expansion: width, height : #rect.width, #rect.height => width, height : ...#rect 
// TODO: @ is implemented, $ and # are not
rvalue -> ("#","@","$") locator_expr
// TODO: SUPER: #group will inject objects into the current namespace, instead of making a child object
// TODO: Be very careful with "|" operator precedence
// TODO: use = instead of : ? 
assignment -> list(lvalue, ",") "=" list(statement_expr, "|")



// TODO: [NOT IMPLEMENTED]
side_effect -> lvalue equaity statement_expr
equality -> (= | += | *= | /= | -=)
function_expr -> "!" LITERAL group_expr
// this might be a duplicate of Statement_expr
group_expr -> "(" list(base_expr, ",") ")"

//reward, nextGoal  :  {agree: gold, fetch_quest | silver, fetch_quest; disagree: tomato, shower}
decision_expr -> "{"  list(choice_expr, ';') "}"
choice_expr -> base_expr ":" list(statement_expr, "|")